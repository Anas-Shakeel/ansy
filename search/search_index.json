{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ansy","text":"<p><code>ansy</code> (pronounced ANSI) is a lightweight yet powerful Python library designed to supercharge your command-line output with vivid, expressive styling.</p> <p>Ansy helps you add colors and styles to your terminal output. It is made for developers who want their CLI apps to look clean, colorful, and easy to read without using heavy libraries or writing complex code.</p>"},{"location":"#why-use-ansy","title":"Why use Ansy?","text":"<ul> <li>Multiple Color Modes \u2014 You can color your text using <code>4-bit</code>, <code>8-bit</code>, or <code>24-bit</code> (RGB) color modes. It works on most modern terminals. (Some older terminals may only support <code>4-bit</code> colors) Learn more</li> <li>Style Just What You Need \u2014 You don\u2019t have to color the whole string. Ansy lets you color just parts of a string, like a word, a number, or a keyword. Learn more</li> <li>Gradients &amp; Random Colors \u2014 Want your text to pop? You can apply smooth gradients or even use random colors to make your output stand out. Learn more</li> <li>Text Formatting \u2014 Make your output easier to read with bold, italic, underline, and more formatting options built right in.</li> <li>Remove Styling When Needed \u2014 Ansy can strip away all colors and styles, giving you clean, plain text when needed. For example, when logging or saving to a file. Learn more</li> <li>Common Colors Built In \u2014 No need to search for color codes. Ansy gives you easy access to commonly used colors with clear names and hex codes. Learn more</li> <li>Zero Dependencies \u2014 Written in pure Python, Ansy has no third-party dependencies, making it reliable, portable, and easy to integrate into any project.</li> <li>Developer-Friendly API \u2014 The code is easy to write and easy to understand. You don\u2019t need to learn anything complicated to use Ansy.</li> <li>Very Lightweight \u2014 The whole library is under 90 KB, and most of that is helpful stuff like docstrings, color data, and type hints for better code. Ansy stays lean without sacrificing power.</li> </ul>"},{"location":"#preview","title":"Preview","text":""},{"location":"attributions/","title":"Attributions","text":"<p>This project wouldn\u2019t be as complete without the incredible work of others. Special thanks to the following sources:</p> <ul> <li> <p><code>_can_do_colour()</code>: Logic for checking environment variables to determine if a terminal supports color was adapted from <code>termcolor</code>. See THIRD PARTY LICENSES for full license details.</p> </li> <li> <p>8-bit Color Naming: X-Term color names used for 8-bit colors were referenced and adapted from the excellent 256-colors-cheatsheet. (Cleaned up and modernized for Ansy)</p> </li> <li> <p>The <code>colors</code> module uses a rich collection of 1400+ colors, sourced from the Corpora project by Darius Kazemi.</p> </li> </ul> <p>Huge thanks to all of you for saving me hours of reinventing the wheel, and for making Ansy better than it could\u2019ve been alone.</p>"},{"location":"compatibility/","title":"Compatibility and Testing","text":"<p>Ansy has been thoroughly tested across major operating systems and Python versions to ensure reliable performance in diverse environments.</p> <p>Supported platforms:</p> <ul> <li>Linux</li> <li>Windows</li> <li>MacOS</li> </ul> <p>Tested Python versions:</p> Python version Linux Windows MacOS <code>3.8</code> \u2705 \u2705 \u2705 <code>3.9</code> \u2705 \u2705 \u2705 <code>3.10</code> \u2705 \u2705 \u2705 <code>3.11</code> \u2705 \u2705 \u2705 <code>3.12</code> \u2705 \u2705 \u2705 <code>3.13</code> \u2705 \u2705 \u2705 <p>Note</p> <p>All these versions are tested using automated workflows on GitHub Actions for Linux (ubuntu), Windows, and macOS environments.</p>"},{"location":"contributing/","title":"Contributing to Ansy","text":"<p>Thank you for considering contributing to Ansy! Your code, bug reports, and improvements are very welcome.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#fork-and-clone","title":"Fork and Clone","text":"<p>Start by forking the repository and cloning it locally:</p> <pre><code>git clone https://github.com/anas-shakeel/ansy.git\ncd ansy\n</code></pre>"},{"location":"contributing/#create-a-virtual-environment-recommended","title":"Create a Virtual Environment (Recommended)","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"contributing/#install-dev-dependencies","title":"Install Dev Dependencies","text":"<p>Install the package in editable mode with development tools:</p> <pre><code>pip install -r requirements-dev.txt\n</code></pre>"},{"location":"contributing/#create-a-new-branch","title":"Create a New Branch","text":"<p>Create a new branch for your changes:</p> <pre><code># Checkout a new branch and make your changes\ngit checkout -b my-new-feature-branch\n# Make your changes...\n</code></pre>"},{"location":"contributing/#run-tests","title":"Run Tests","text":"<p>Format the code using <code>black</code> and Run tests locally to make sure everything is working as expected.</p> <pre><code>black . # Format code\npytest . # Test code\n</code></pre> <p>Make sure all tests pass before opening a pull request.</p>"},{"location":"contributing/#documentation-updates","title":"Documentation Updates","text":"<p>If you're updating function signatures, APIs, examples, or docstrings that appear in the documentation, please make sure to update the relevant parts of the <code>docs/</code> too.</p> <p>Ansy uses <code>mkdocs</code> with the Material for MkDocs theme to power its documentation.</p> <p>To preview the docs locally:</p> <pre><code>mkdocs serve\n# Visit http://localhost:8000\n</code></pre> <p>How docs are deployed?</p> <p>Documentation is deployed by Maintainers using <code>mkdocs gh-deploy</code>, But only after pull requests are reviewed and merged. Contributors should not run <code>mkdocs gh-deploy</code> themselves.</p>"},{"location":"contributing/#commit-changes-and-submit-a-pull-request","title":"Commit Changes and Submit a Pull Request","text":"<ol> <li> <p>Commit your changes:</p> <pre><code>git commit -m \"Add a new feature\"\n</code></pre> </li> <li> <p>Push to your fork:</p> <pre><code>git push origin my-new-feature-branch\n</code></pre> </li> <li> <p>Open a pull request on GitHub \ud83d\ude4c</p> </li> </ol>"},{"location":"contributing/#reporting-issues","title":"\ud83d\udc1e Reporting Issues","text":"<p>Found a bug? Something not working as expected? Or maybe the docs are unclear in a spot? We would love to hear from you!</p> <ul> <li>\ud83d\udc1e Bug Reports \u2013 Found something broken? Open a bug report and tell us what\u2019s going wrong.</li> <li>\ud83d\udca1 Feature Requests \u2013 Have an idea that could make Ansy better? Suggest a feature.</li> <li>\u2753 Questions \u2013 Curious about something? Need usage help? Ask a question.</li> </ul> <p>Each of these comes with a pre-filled template so you know exactly what info to include. It helps us help you faster!</p>"},{"location":"contributing/#before-you-open-an-issue","title":"Before You Open an Issue","text":"<ul> <li>Search existing issues. your bug might already be reported or even fixed!</li> <li>Check if you're using the latest version of Ansy (<code>pip install --upgrade ansy</code>).</li> <li>Confirm if the bug is specific to your OS, terminal, or Python version.</li> </ul>"},{"location":"contributing/#thanks-for-helping","title":"Thanks for Helping","text":"<p>Bug reports and feature requests are one of the best ways to help improve the project. Thank you for making Ansy better for everyone! \u2665\ufe0f</p>"},{"location":"examples/","title":"Examples","text":"<p>Examples are coming soon! \ud83d\udea7</p>"},{"location":"installation/","title":"Installation","text":"<p>Ansy is available on PyPI and can be installed with <code>pip</code>.</p> <pre><code>pip install ansy\n</code></pre> <p>This installs the latest version from PyPI. If you've got Python 3.8+ and <code>pip</code> installed, you're good to go. See also</p> <p>Or you can also install Ansy from source:</p> <pre><code>git clone https://github.com/anas-shakeel/ansy.git\ncd ansy\npip install .\n</code></pre>"},{"location":"installation/#quick-check","title":"Quick Check","text":"<p>To verify the installation, run <code>ansy</code> alone or with <code>-h</code> flag in the terminal:</p> <pre><code>ansy -h\n</code></pre> <p>You should see help text from ansy!</p>"},{"location":"installation/#example-usage","title":"Example Usage","text":"<p>Here\u2019s a minimal example that prints colored text onto the terminal:</p> <pre><code>from ansy import printc\n\nprintc(\"The background is red!\", bgcolor=\"red\")\n</code></pre>"},{"location":"installation/#windows-console-support","title":"Windows Console Support","text":"<p>Ansy has zero dependencies, but if you're on Windows, you may need to install <code>colorama</code> to enable proper color rendering in the Command Prompt or PowerShell.</p> <p>Install colorama (only on Windows)</p> <pre><code>pip install colorama\n</code></pre> <p>Then initialize it in your script before using ansy:</p> <pre><code>from ansy import printc\nfrom colorama import just_fix_windows_console\n\njust_fix_windows_console()\nprintc(\"The background is red!\", bgcolor=\"red\")\n</code></pre> <p>This ensures that ANSI escape codes display correctly on Windows terminals.</p> <p>Note</p> <p>This step is only needed on Windows. On Linux and MacOS, ansy works out of the box.</p>"},{"location":"license/","title":"Licenses","text":""},{"location":"license/#ansy-license-mit","title":"Ansy License (MIT)","text":"<p>Copyright (c) 2024 Anas Shakeel</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"license/#third-party-licenses","title":"Third Party Licenses","text":""},{"location":"license/#termcolor","title":"Termcolor","text":"<p>MIT License for termcolor</p> <p>Copyright (c) 2008-2011 Volvox Development Team</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>"},{"location":"license/#256-colors-cheat-sheet","title":"256 colors cheat sheet","text":"<p>CC License for 256 colors cheat sheet</p> <p>Copyright (c) Jonas Jared Jacek</p> <p>https://www.ditig.com/publications/256-colors-cheat-sheet</p> <p>256 colors cheat sheet by Jonas Jared Jacek is licensed under CC BY-NC-SA 4.0</p>"},{"location":"license/#corpora-v001","title":"Corpora (v0.0.1)","text":"<p>CC0 License for corpora</p> <p>To the extent possible under law, Darius Kazemi has waived all copyright and related or neighboring rights to Corpora. This work is published from: United States.</p>"},{"location":"usage/","title":"Usage","text":"<p><code>ansy</code> was meant to be simple and easy to use, so it should not give you a hard time. (If it does, Then Uninstall it right away!)</p>"},{"location":"usage/#from-termcolor-to-ansy","title":"From Termcolor to Ansy","text":"<p>If your code uses <code>termcolor</code> and you want to shift to <code>ansy</code>, you can safely replace the <code>colored</code> function of <code>termcolor</code> with the <code>colored</code> function of <code>ansy</code>.</p> ansytermcolor <pre><code>from ansy import colored\n\ncolored(\n  text='this is ansy',\n  fgcolor='light_red',\n  bgcolor='dark_grey',\n  attrs=['bold']\n)\n</code></pre> <pre><code>from termcolor import colored\n\ncolored(\n  text='this is termcolor',\n  color='light_red',\n  on_color='dark_grey',\n  attrs=['bold']\n)\n</code></pre> Warning <p>Make sure to change argument name <code>color</code> to <code>fgcolor</code> &amp; <code>on_color</code> to <code>bgcolor</code> if you were using keyword arguments. And also change the bgcolor name from <code>on_x</code> to just <code>x</code>. (e.g <code>on_red</code> to <code>red</code>)</p>"},{"location":"usage/#coloring-a-string","title":"Coloring a String","text":"<p>Use the <code>colored</code> function, if you want to colorize a string. Easily apply ANSI colors and text attributes to your strings using the <code>colored</code> function:</p> <pre><code>from ansy import colored\n\n# Bold red text on a white background\nred_white = colored(\n    text=\"This is a string\",\n    fgcolor=\"red\",\n    bgcolor=\"white\",\n    attrs=[\"bold\"]\n)\nprint(red_white)\n</code></pre> <p></p> Tip <p>Leave any argument as <code>None</code> (or omit) to simply skips that formatting layer.</p>"},{"location":"usage/#quick-print","title":"Quick Print","text":"<p>If you just want to print a colored string without storing it, <code>printc()</code> is your friend:</p> <pre><code>from ansy import printc\n\nprintc(\n    \"Print this string after formatting.\",\n    fgcolor=\"plum\",\n    attrs=[\"italic\"],\n    color_mode=8\n)\n</code></pre> <p></p> <p><code>printc()</code> is just <code>colored()</code> function with auto-print feature (and no return!). So use it as you would use <code>colored()</code> (without return, ofcourse \ud83d\ude09)</p>"},{"location":"usage/#choosing-color-modes","title":"Choosing Color Modes","text":"<p>The <code>color_mode</code> parameter lets you pick between:</p> <ul> <li>4-bit (16 colors)</li> <li>8-bit (256 colors)</li> <li>24-bit (truecolor, ~16.7M colors)</li> </ul> <pre><code># Underlined Text with brown_sandy FG and grey_9 BG.\nprintc(\n    \"This is a string\",\n    fgcolor=215, # brown_sandy\n    bgcolor=240, # grey_9\n    attrs=[\"underline\"],\n    color_mode=8,\n)\n</code></pre> <p>Notice i've also changed the colors to some codes. These codes belong to the <code>8-bit</code> color system and they range from <code>0</code> to <code>255</code>. Refer to this 256 color chart.</p> <p>You can pass either color codes or human-friendly names:</p> <pre><code># Same Underlined Text with brown_sandy FG and grey_9 BG.\nprintc(\n    \"This is a string\",\n    fgcolor=\"brown_sandy\",\n    bgcolor=\"grey_9\",\n    attrs=[\"underline\"],\n    color_mode=8\n)\n</code></pre> <p></p> <p>To explore all available 8-bit colors, use <code>get_all_colors()</code>. It yields a tuple containing color name and code on each iteration.</p> <pre><code>from ansy import get_all_colors\n\n# Print all 256 colors\nfor name, code in get_all_colors():\n    print(f\"{code}: {name}\")\n</code></pre> <p>Or just call <code>print_all_colors()</code>.</p> <pre><code>from ansy import print_all_colors\n\nprint_all_colors()\n</code></pre>"},{"location":"usage/#truecolor-support","title":"Truecolor Support","text":"<p>Most Modern terminals support RGB or Truecolor which offer a much much more wider range of colors (approx. 16.7 million colors).</p> <p><code>24-bit</code> color system accepts RGB tuple as well as Hex color codes.</p> <pre><code># RGB tuple\nfg = (255, 100, 100)\nbg = (215, 215, 215)\nprintc(\"This is a string\", fg, bg, [\"italic\"], color_mode=24)\n\n# Hex codes\nprintc(\"This is a string\", \"#FF6464\", \"#D7D7D7\", [\"italic\"], color_mode=24)\n</code></pre> <p></p>"},{"location":"usage/#coloring-parts-of-a-string","title":"Coloring Parts of a String","text":"<p>By default, <code>colored()</code> applies formatting to the entire string you pass in. But what if you want to apply different styles to specific parts of a string?</p> <p>Let\u2019s start with the basic way to do that:</p> <pre><code>from ansy import colored\n\n# Format only the word \"World\"\nformatted_world = colored('World', fgcolor='purple', attrs=['bold'], color_mode=8)\nprint(f\"Hello, {formatted_world}!\")\n</code></pre> <p></p> <p>Want to style \"Hello\" differently too?</p> <pre><code>formatted_hello = colored('Hello', fgcolor='orange', color_mode=8)\nformatted_world = colored('World', fgcolor='purple', attrs=['bold'], color_mode=8)\n\nprint(f\"{formatted_hello}, {formatted_world}\")\n</code></pre> <p></p> <p>That works, but as you can imagine, this gets messy quickly in larger strings.</p> <p>The solution to this problem is <code>colored_ansy()</code> function. It adds the styling defined in <code>style</code> dictionary to wherever an Ansy string is found in the whole string.</p>"},{"location":"usage/#ansy-strings","title":"Ansy Strings","text":"<p>An Ansy string is a special inline markup format:</p> <pre><code>@style_name[Your text here]\n</code></pre> <p>Syntax of an Ansy String</p> <p>An Ansy String starts with <code>@</code> symbol followed by the name of the style (defined by the <code>style</code> dictionary), and the text in backets <code>[text]</code> to which you want to apply the formatting. <pre><code>ansy_string = \"This is @my_style[your text]\"\n</code></pre></p> <p>You define the styles (presets) separately in a style dictionary, and <code>colored_ansy()</code> applies them wherever it finds these tags.</p>"},{"location":"usage/#style-dictionary","title":"Style Dictionary","text":"<p>Style dictionary is a dictionary which defines the style(s) to apply to the ansy strings. Each <code>style</code> is a dictionary describing how to format the text:</p> <pre><code>style = {\n    \"my_style\": {\n        \"color_mode\": 8,\n        \"fgcolor\": \"light_red\",\n        \"bgcolor\": 255,\n        \"attrs\": [\"bold\", \"italic\"]\n    }\n}\n</code></pre> <p>Purpose of this structure is so that you could define all your styles in one dictionary and then use it everywhere, instead of creating a dictionary for each style and create a mess in your code.</p> <p>Note</p> <p>Name of the style dictionary doesn't have to be <code>style</code>.</p> <p>Every key in this <code>style</code> dictionary is the name of the style that you're gonna use in the <code>ansy strings</code>.</p> <p>Each style must have 4 <code>key:value</code> pairs:</p> <ul> <li><code>color_mode</code>: Choose from <code>4</code>, <code>8</code>, or <code>24</code></li> <li><code>fgcolor</code>: Foreground color (name, code, RGB, or Hex)</li> <li><code>bgcolor</code>: Background color</li> <li><code>attrs</code>: List of attributes, like <code>bold</code>, <code>italic</code>, <code>underline</code> etc</li> </ul> <p>Note</p> <p><code>color_mode</code> decides which colors to use and you should only provide colors supported by that mode. </p> <p>Now, Back to our problem.</p> <pre><code>from ansy import colored_ansy\n\nstyle = {\n    \"orange\": {\n        \"color_mode\": 8,\n        \"fgcolor\": \"orange\",\n        \"bgcolor\": None,\n        \"attrs\": None\n    },\n    \"purple\": {\n        \"color_mode\": 8,\n        \"fgcolor\": \"purple\",\n        \"bgcolor\": None,\n        \"attrs\": [\"bold\"]\n    }\n}\n\nformatted = colored_ansy(\"@orange[Hello] @purple[World]\", style)\nprint(formatted)\n</code></pre> <p></p> <p>You must be thinking, Wow! Nicely Simplified. We now have to write even more lines of code, right?</p> <p>Well yeah! but only if you do it manually. There is another function called <code>create_style()</code> which makes it easier to define styles. (Yup! there's a function for everything)</p> <pre><code>from ansy import colored_ansy, create_style\n\n# Create styles\nstyle = {\n        \"orange\": create_style(8, 'orange'),\n        \"purple\": create_style(8, 'purple', attrs=['bold'])\n}\n\nformatted = colored_ansy(\"@orange[Hello] @purple[World]\", style)\nprint(formatted)\n</code></pre> <p></p> <p>Still more code, but it's just a one time thing! now you can use <code>orange</code> and <code>purple</code> style to format as many parts as you want.</p>"},{"location":"usage/#example","title":"Example","text":"<p>This below example hides some parts of text using <code>concealed</code> attribute.</p> <pre><code># Reusing style Dictionary\nstyle['hide'] = create_style(attrs=['concealed'])\n\nformatted = colored_ansy(\n    'Hide this @hide[..], &amp; this @hide[++], but not this @hide[**]',\n    style\n)\n\nprint(formatted)\n</code></pre> <p></p> <p>Note</p> <p><code>concealed</code> doesn\u2019t delete text. It just makes it invisible in the terminal. (you can confirm this by copying the hidden area and pasting it into your text editor)</p>"},{"location":"usage/#applying-gradients","title":"Applying Gradients","text":"<p>Ansy lets you apply horizontal gradients to the foreground of your strings using the <code>colored_gradient()</code> function.</p> <pre><code>from ansy import colored_gradient\n\n# Smooth gradient from red to blue (left to right)\nformatted = colored_gradient(\"This is ansy.\", (255, 100, 100), (100, 50, 200))\nprint(formatted)\n</code></pre> <p></p> Warning <p>Gradients are only available in 24-bit color mode. So make sure your terminal supports it.</p>"},{"location":"usage/#faking-vertical-gradient","title":"Faking Vertical Gradient","text":"<p><code>colored_gradient()</code> only supports horizontal gradients. But with a clever trick, you can simulate vertical gradients by using line breaks (<code>\\n</code>) in your string:</p> <pre><code>text = (\n    \"This text is\\n\"\n    \"going to be used\\n\"\n    \"to create or fake\\n\"\n    \"a vertical gradient.\"\n)\nprint(colored_gradient(text, \"#00ffff\", \"#b00b1e\"))\n</code></pre> <p></p> <p>Technically, it's still a horizontal gradient, but each line starts a bit deeper into the gradient transition, giving it a diagonal or vertical illusion.</p>"},{"location":"usage/#random-colors","title":"Random Colors","text":"<p>Ansy can randomly colorize your strings. Just for fun, experimentation, or creating playful terminal UIs.</p> <pre><code>from ansy import colored_random\n\nformatted = colored_random(\"Random Random, Evil Phantom!\")\nprint(formatted)\n</code></pre> <p></p> <p>Note</p> <p>By default, <code>colored_random()</code> picks a random color from the <code>4-bit</code> colorsystem and applies it to the entire string. But you can go much further.</p>"},{"location":"usage/#target-based-randomization","title":"Target Based Randomization","text":"<p>You can control how randomness is applied by choosing a <code>target</code>:</p> <pre><code>print(colored_random('Apply random colors to each word', target='words'))\nprint(colored_random('Apply random colors to each character', target='chars'))\n</code></pre> <p></p> Warning <p>While <code>target=\"chars\"</code> lets you apply random colors to each individual character, it's not recommended with the <code>24-bit</code> color mode especially for longer strings.</p> <p>ANSI escape codes (used for styling terminal output) are added before and after each character. In <code>24-bit</code> mode, these codes are much longer because they include full RGB values.</p> <p>For example, formatting <code>\"This\"</code> with <code>24-bit</code> mode and <code>target=\"chars\"</code>: <pre><code>colored_random(\"This\", target=\"chars\", color_mode=24)\n</code></pre></p> <p>might generate something like: <pre><code>'\\x1b[38;2;5;155;190mT\\x1b[0m\\x1b[38;2;119;11;99mh\\x1b[0m\\x1b[38;2;24;50;220mi\\x1b[0m\\x1b[38;2;178;45;244ms\\x1b[0m'\n</code></pre> That's over 100 characters just to render 4!</p> <p>So for longer strings, this quickly becomes inefficient and bloats the output.</p> <p>Recommended:</p> <ul> <li>Prefer <code>target=\"words\"</code> or <code>target=\"all\"</code> when using <code>color_mode=24</code></li> <li>If you must color per character, consider using <code>8-bit</code> mode (<code>color_mode=8</code>) for a lighter output</li> </ul>"},{"location":"usage/#custom-color-palettes","title":"Custom Color Palettes","text":"<p>You can use a custom palette to avoid completely random chaos and keep things visually consistent.</p> <pre><code># Palette of 24-bit colors\npalette = [\"#69D2E7\", \"#A7DBD8\", \"#E0E4CC\", \"#F38630\", \"#FA6900\"]\n\nformatted = colored_random(\n    \"Not so random palette.\",\n    custom_palette=palette,\n    target=\"words\",\n    color_mode=24\n)\n\nprint(formatted)\n</code></pre> <p></p> <p>Note</p> <p>You can use colors from any color system (Name, Code, Hex, or RGB). Just make sure to set the appropriate <code>color_mode</code>.</p>"},{"location":"usage/#removing-ansi-escape-codes","title":"Removing ANSI Escape Codes","text":"<p>Sometimes, you might want to strip out all styling and get back the plain, unformatted version of a string. Especially if you're logging output, comparing values, or writing to a file.</p> <p>Ansy provides the handy <code>de_ansi()</code> function just for that!</p> <pre><code>from ansy import colored, de_ansi\n\nansi_string = colored(\n    \"This string contains ANSI\",\n    fgcolor=\"light_blue\",\n    bgcolor=\"dark_grey\",\n    attrs=[\"italic\"]\n)\nclean_string = de_ansi(ansi_string)\n\nprint([ansi_string])\nprint([clean_string])\n</code></pre> <p></p> <p>Tip</p> <p>If you ever want to check whether a string contains ansi codes, just print it like a list <code>print([ansi_string])</code>. That way, ANSI escape codes won't escape (No Pun Intended)</p>"},{"location":"usage/#the-colors-module","title":"The Colors Module","text":"<p>Ansy ships with a beautiful, ready-to-use 24-bit color collection. Inspired by popular design systems and palettes.</p> <p>It includes:</p> <ul> <li>Material Colors (19 base colors \u00d7 14 shades each)</li> <li>Web/HTML Colors (140 standard named colors)</li> <li>Color Palettes (200 colors with 5 colors in each palette)</li> </ul> <p>All of these are accessible via the <code>colors</code> module:</p> <pre><code>from ansy import colors\n</code></pre>"},{"location":"usage/#material-colors","title":"Material Colors","text":"<p>Get all shades of a color from Material Colors using <code>get_material_color()</code>:</p> <pre><code>red_shades = colors.get_material_color(\"red\")\nprint(red_shades)\n</code></pre>"},{"location":"usage/#html-or-web-colors","title":"HTML or Web Colors","text":"<p>Get HTML or Web Colors using <code>get_web_colors()</code>. It returns a generator iterator, which yields dictionaries of colors from HTML or Web Colors.</p> <pre><code>for color_dict in colors.get_web_colors():\n    print(color_dict)\n</code></pre>"},{"location":"usage/#color-palettes","title":"Color Palettes","text":"<p>Get Predefined Color Palettes using <code>get_palettes()</code>. It returns a generator iterator, which yields a list of colors (a palette) on each iteration.</p> <pre><code>for palette in colors.get_palettes():\n    print(palette)\n</code></pre> <p>These color utilities are especially useful when working with <code>colored_random()</code>, defining themes, or just exploring visually cohesive color schemes for CLI applications.</p>"},{"location":"useful-to-know/","title":"Useful To Know","text":""},{"location":"useful-to-know/#attributes","title":"Attributes","text":"<p>There are several attributes in <code>ansy</code> but not all are widely supported. Some may not work as expected or not work at all.</p> Attribute What it does Widely Supported <code>bold</code> bolds the text or increases intensity \u2705 <code>dark</code> Darkens the text \u2705 <code>italic</code> Italicizes the text \u274c <code>blink</code> Sets the blinking to less than 150 times per minute \u274c <code>reverse</code> Swaps foreground and background colors of text \u2705 <code>concealed</code> Hides the text visually, but does not remove \u274c <code>underline</code> Underlines the text \u2705 <code>double-underline</code> Double-Underlines the text (Disables bold mode on some terminals) \u2705 <code>overline</code> Overlines the text i.e line above the text \u274c <code>strike</code> Strikes the text, as if marked for deletion \u274c"},{"location":"useful-to-know/#standard-colors-4-bit","title":"Standard Colors (4-Bit)","text":"<p><code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>blue</code>, <code>magenta</code>, <code>cyan</code>, <code>white</code>,</p> <p><code>light_grey</code>, <code>dark_grey</code>, <code>light_red</code>, <code>light_green</code>, <code>light_yellow</code>,</p> <p><code>light_blue</code>, <code>light_magenta</code>, <code>light_cyan</code></p>"},{"location":"useful-to-know/#256-colors-8-bit","title":"256 Colors (8-Bit)","text":"<p>Refer to 256 colors cheat sheet for color names and codes. (color names in <code>ansy</code> have been updated but codes remain the same)</p> <p>You can also call <code>ansy.print_all_colors()</code> to see all color names and their codes.</p>"},{"location":"useful-to-know/#html-or-web-colors","title":"HTML or Web Colors","text":"<p>Refer to this resource for HTML Colors.</p>"},{"location":"useful-to-know/#material-colors","title":"Material Colors","text":"<p>These below are the names of Material Colors.</p> <p><code>red</code>, <code>pink</code>, <code>purple</code>, <code>deeppurple</code>, <code>indigo</code>, <code>blue</code>, <code>lightblue</code>,</p> <p><code>cyan</code>, <code>teal</code>, <code>green</code>, <code>lightgreen</code>, <code>lime</code>, <code>yellow</code>, <code>amber</code>,</p> <p><code>orange</code>, <code>deeporange</code>, <code>brown</code>, <code>grey</code>, <code>bluegrey</code>.</p> <p>These below are the shades of each Material Color.</p> <p><code>50</code>, <code>100</code>, <code>200</code>, <code>300</code>, <code>400</code>, <code>500</code>, <code>600</code>, <code>700</code>, <code>800</code>, <code>900</code>,</p> <p><code>a100</code>, <code>a200</code>, <code>a400</code>, <code>a700</code>.</p> <p>Refer to this Material Colors chart.</p>"},{"location":"api-reference/ansy/","title":"Ansy API","text":"<p>This section contains the full API reference for Ansy.</p>"},{"location":"api-reference/ansy/#colored","title":"colored","text":"<p>Colorize text using <code>4-bit</code>, <code>8-bit</code>, or <code>24-bit</code> color modes. Supports 4-bit (standard), 8-bit (extended), and 24-bit (true color) modes. If no formatting is provided, returns the plain text.</p> <pre><code>colored(\n    text: str,\n    fgcolor: Color = None,\n    bgcolor: Color = None,\n    attrs: Iterable[Attribute] = None,\n    color_mode: ColorMode = 4,\n    *,\n    no_color: bool = None,\n    force_color: bool = None,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code>: The text you want to format</li> <li><code>fgcolor</code>: Foreground color of the text</li> <li><code>bgcolor</code>: Background color of the text</li> <li><code>attrs</code>: Iterable of attributes to apply like <code>['bold', 'italic']</code></li> <li><code>color_mode</code>: The color mode (<code>4</code>, <code>8</code>, or <code>24</code>). Default is <code>4</code></li> <li><code>no_color</code>: Disable formatting</li> <li><code>force_color</code>: Force formatting regardless of terminal support</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: A formatted string with colors and styles (or plaintext)</li> </ul> <p>Raises:</p> <ul> <li><code>ColorModeError</code>: If <code>color_mode</code> is invalid</li> <li><code>InvalidColorError</code> If <code>fgcolor</code> or <code>bgcolor</code> is an invalid</li> <li><code>AttributeError</code>: If <code>attrs</code> contains an invalid attribute</li> </ul> <p>Note</p> <p>If <code>fgcolor</code>, <code>bgcolor</code>, and <code>attrs</code> are all set to <code>None</code>, the text itself is returned without any ansi codes added.</p>"},{"location":"api-reference/ansy/#printc","title":"printc","text":"<p>Prints text to the terminal using <code>colored()</code> formatting. Supports all standard <code>print()</code> parameters along with color customization options.</p> <pre><code>printc(\n    text: str,\n    fgcolor: Color = None,\n    bgcolor: Color = None,\n    attrs: Iterable[Attribute] = None,\n    color_mode: ColorMode = 4,\n    *,\n    sep=\" \",\n    end=\"\\n\",\n    file=None,\n    flush=False,\n    no_color: bool = None,\n    force_color: bool = None,\n)\n</code></pre> <p>It's a Shortcut for <code>print(colored(...))</code>.</p>"},{"location":"api-reference/ansy/#colored_ansy","title":"colored_ansy","text":"<p>Applies styles to parts of a string using Ansy syntax <code>@style_name[text]</code>.</p> <pre><code>colored_ansy(\n    text: str,\n    style: dict,\n    *,\n    no_color: bool = None,\n    force_color: bool = None,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code>: The input string containing Ansy-style tags like <code>@style_name[text]</code>.</li> <li><code>style</code>: A dictionary mapping style names to style definitions. Each style definition must be a <code>dict</code> containing:<ul> <li><code>color_mode: int</code>: The color mode to use</li> <li><code>fgcolor: Color</code>: Foreground color of the text</li> <li><code>bgcolor: Color</code>: Background color of the text</li> <li><code>attrs: Iterable[Attribute]</code>: An iterable of attributes. (bold, italic etc.)</li> </ul> </li> <li><code>no_color</code>: Disable formatting</li> <li><code>force_color</code>: Force formatting regardless of terminal support</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: A formatted string</li> </ul> <p>Raises:</p> <ul> <li><code>StyleError</code>: If <code>style</code> used in ansy string <code>text</code> is not found in <code>style</code> dict</li> <li><code>ColorModeError</code>: If <code>color_mode</code> provided in style is invalid</li> </ul>"},{"location":"api-reference/ansy/#colored_gradient","title":"colored_gradient","text":"<p>Applies a smooth horizontal gradient to text using 24-bit RGB colors.</p> <pre><code>colored_gradient(\n    text: str,\n    start_color: Union[RGBTuple, str],\n    end_color: Union[RGBTuple, str],\n    quality: Quality = \"medium\",\n    reverse: bool = False,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code>: The string to which the horizontal gradient will be applied</li> <li><code>start_color</code>: The starting color of the gradient. (in either RGB tuple form or HEX string.)</li> <li><code>end_color</code>: The ending color of the gradient</li> <li><code>quality</code>: The gradient quality. Options are <code>low</code>, <code>medium</code>, and <code>high</code>. (Higher values generate smoother gradients but longer output strings)</li> <li><code>reverse</code>: If <code>True</code>, flips the gradient</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: A formatted string</li> </ul> <p>Raises:</p> <ul> <li><code>InvalidColorError</code> If <code>start_color</code> or <code>end_color</code> is an invalid 24-bit color</li> <li><code>AssertionError</code> If:<ul> <li><code>quality</code> is not set to <code>high</code> or <code>medium</code> or <code>low</code></li> <li>any of <code>start_color</code> or <code>end_color</code> are <code>None</code></li> </ul> </li> </ul>"},{"location":"api-reference/ansy/#colored_random","title":"colored_random","text":"<p>Applies random colors to characters, words, or the entire string using the specified color system. Optional support for random attributes and custom palettes.</p> <pre><code>colored_random(\n    text: str,\n    target: Literal[\"all\", \"words\", \"chars\"] = \"all\",\n    color_mode: ColorMode = 4,\n    custom_palette: Iterable = None,\n    attrs: Iterable[Attribute] = None,\n    random_attrs: bool = False,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code>: Text to format</li> <li><code>target</code>: Defines how random colors are applied:<ul> <li><code>all</code>: apply one random color to the entire text</li> <li><code>words</code>: apply different random colors to each word</li> <li><code>chars</code>: apply different random colors to each characte</li> </ul> </li> <li><code>color_mode</code>: Color system to use: <code>4</code>, <code>8</code>, or <code>24-bit</code></li> <li><code>custom_palette</code>: A list of user-defined colors to choose from</li> <li><code>attrs</code>: Iterable of attributes to apply to all text. (all attributes will be applied uniformely)</li> <li><code>random_attrs</code>: If <code>True</code>, randomizes provided attributes <code>attrs</code> too</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: A formatted string</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>: If <code>target</code> is not set to <code>'chars'</code>, <code>'words'</code>, <code>'all'</code></li> <li><code>ColorModeError</code>: If <code>color_mode</code> is invalid</li> <li><code>InvalidColorError</code>: If <code>custom_palette</code> contains an invalid color</li> <li><code>AttributeError</code>: If <code>attrs</code> contains an invalid attribute</li> </ul>"},{"location":"api-reference/ansy/#de_ansi","title":"de_ansi","text":"<p>Removes all ANSI codes (colors and styles) from a string.</p> <pre><code>de_ansi(text: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code>: The input string from which ANSI escape sequences should be removed</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: A plain, ANSI-free string</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code>: If <code>text</code> is not a string</li> </ul>"},{"location":"api-reference/ansy/#make_ansi","title":"make_ansi","text":"<p>Generates Raw ANSI escape sequence based on the provided colors and attributes. (Used internally by some functions)</p> <pre><code>make_ansi(\n    fgcolor: Color = None,\n    bgcolor: Color = None,\n    attrs: Iterable[Attribute] = None,\n    color_mode: ColorMode = 4,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>fgcolor</code>: The foreground color to apply. Must be valid within the specified <code>color_mode</code></li> <li><code>bgcolor</code>: The background color to apply. Must be valid within the specified <code>color_mode</code></li> <li><code>attrs</code>: Iterable of attributes to apply. For example: <code>[\"bold\", \"italic\"]</code></li> <li><code>color_mode</code>: Color system to use. Must be one of <code>4</code>, <code>8</code>, or <code>24</code>. (Defaults to 4)</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The ANSI escape sequence string. (without the reset code)</li> </ul> <p>Raises:</p> <ul> <li><code>InvalidColorError</code> \u2014 If <code>fgcolor</code> or <code>bgcolor</code> is not valid in the given <code>color_mode</code></li> <li><code>ColorModeError</code> \u2014 If <code>color_mode</code> is not one of <code>4</code>, <code>8</code>, or <code>24</code></li> </ul>"},{"location":"api-reference/ansy/#make_gradient","title":"make_gradient","text":"<p>Generates a gradient of RGB values interpolated between <code>start_color</code> to <code>end_color</code> over a number of steps. (Used internally by <code>colored_gradient</code> function)</p> <pre><code>make_gradient(\n    start_color: RGBTuple,\n    end_color: RGBTuple,\n    steps: int = 10,\n    reverse: bool = False,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>start_color</code>: The starting color as an RGB tuple. e.g. <code>(255, 0, 0)</code></li> <li><code>end_color</code>: The ending color as an RGB tuple. e.g. <code>(0, 255, 0)</code></li> <li><code>steps</code>: Number of colors to generate between <code>start_color</code> and <code>end_color</code>. (Must be at least 2)</li> <li><code>reverse</code>: If True, the gradient is flipped horizontally. (end \u2192 start)</li> </ul> <p>Returns:</p> <ul> <li><code>generator[tuple[int, int, int]]</code>: A generator that yields RGB tuples representing the gradient</li> </ul> <p>Raises:</p> <ul> <li><code>InvalidColorError</code>: If <code>start_color</code> or <code>end_color</code> is not a valid RGB tuple</li> </ul>"},{"location":"api-reference/ansy/#create_style","title":"create_style","text":"<p>Generates and validates a style dictionary for use in <code>colored_ansy()</code>.</p> <pre><code>create_style(\n    color_mode: ColorMode = 4,\n    fgcolor: Color = None,\n    bgcolor: Color = None,\n    attrs: Iterable[Attribute] = None,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color_mode</code>: The color mode to use</li> <li><code>fgcolor</code>: The foreground color. Must match the selected <code>color_mode</code></li> <li><code>bgcolor</code>: The background color. Must match the selected <code>color_mode</code></li> <li><code>attrs</code>: Iterable of attributes to apply. For example: <code>[\"bold\", \"italic\"]</code></li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: A dictionary representing the validated style, usable with <code>colored_ansy()</code></li> </ul> <p>Raises:</p> <ul> <li><code>InvalidColorError</code>: If <code>fgcolor</code> or <code>bgcolor</code> is invalid</li> <li><code>ColorModeError</code>: If <code>color_mode</code> is invalid</li> <li><code>AttributeError</code>: If any value in <code>attrs</code> is not a valid attribute</li> </ul>"},{"location":"api-reference/ansy/#create_random_palette","title":"create_random_palette","text":"<p>Return a list of <code>n</code> random colors for the given color mode.</p> <pre><code>create_random_palette(\n    color_mode: ColorMode,\n    n: int,\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color_mode</code>: The color mode to use</li> <li><code>n</code>: Number of colors to generate in the palette</li> </ul> <p>Returns:</p> <ul> <li><code>list[str | tuple[int, int, int]]</code>: A list of randomly selected colors compatible with the specified color mode</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code>: If <code>n</code> is not an integer</li> <li><code>ColorModeError</code>: If <code>color_mode</code> is invalid</li> </ul>"},{"location":"api-reference/ansy/#contains_ansi","title":"contains_ansi","text":"<p>Check if a string contains ANSI escape codes.</p> <pre><code>contains_ansi(text: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>text</code>: The string to check for ANSI escape codes</li> <li><code>n</code>: Number of colors to generate in the palette</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: <code>True</code> if ANSI codes are present in the string, otherwise <code>False</code></li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code>: If <code>text</code> is not a string</li> </ul>"},{"location":"api-reference/ansy/#get_random_color","title":"get_random_color","text":"<p>Returns a random color from the selected color mode. Output may be a color name or an RGB tuple depending on the mode.</p> <pre><code>get_random_color(color_mode: int = 4)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color_mode</code>: The color mode to use</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: A color name if <code>color_mode</code> is 4 or 8</li> <li><code>tuple[int, int, int]</code>: An RGB tuple if <code>color_mode</code> is 24</li> </ul> <p>Raises:</p> <ul> <li><code>ColorModeError</code>: If <code>color_mode</code> is invalid</li> </ul>"},{"location":"api-reference/ansy/#colorname_to_code","title":"colorname_to_code","text":"<p>Converts a color name to its corresponding 8-bit color code. If <code>color</code> is already a valid 8-bit code (int between 0\u2013255), it is returned as is.</p> <pre><code>colorname_to_code(color: Color256)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color</code>: A valid color name from 8-bit color system</li> </ul> <p>Returns:</p> <ul> <li><code>int | None</code>: Returns the corresponding 8-bit color code if found, otherwise <code>None</code></li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#code_to_colorname","title":"code_to_colorname","text":"<p>Converts an 8-bit color code to its corresponding color name. If <code>color</code> is already a valid 8-bit color name, it is returned as is.</p> <pre><code>code_to_colorname(color: int)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color</code>: A color code from the 8-bit (256-color) system</li> </ul> <p>Returns:</p> <ul> <li><code>str | None</code>: Returns the corresponding color name if found, otherwise <code>None</code></li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#get_all_colors","title":"get_all_colors","text":"<p>Yields all 8-bit ANSI colors as <code>(name, code)</code> tuples. Colors can be sorted by name or code.</p> <pre><code>get_all_colors(sort_by_name: bool = False)\n</code></pre> <p>Parameters:</p> <ul> <li><code>sort_by_name</code>: If <code>True</code>, colors will be sorted alphabetically by name. If <code>False</code> (default), colors will be sorted by their numeric code (ascending)</li> </ul> <p>Returns:</p> <ul> <li><code>Generator[Tuple[str, int]]</code>: A generator that yields <code>(color_name, color_code)</code> pairs from the ANSI 8-bit color palette</li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#print_all_colors","title":"print_all_colors","text":"<p>Prints all 256 colors from the 8-bit color system, including their names and ANSI codes, sorted by ascending code order.</p> <pre><code>print_all_colors()\n</code></pre>"},{"location":"api-reference/ansy/#search_colors","title":"search_colors","text":"<p>Searches through the 8-bit color names and yields each color that contains the provided query string in their name. Returns a generator of <code>(name, code)</code> tuples.</p> <pre><code>search_colors(query: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>query</code>: Substring to search for within the 8-bit color names</li> </ul> <p>Returns:</p> <ul> <li><code>Generator[Tuple[str, int]]</code>: A generator yielding <code>(color_name, color_code)</code> for matches</li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#hex_to_rgb","title":"hex_to_rgb","text":"<p>Converts a hexadecimal color string to it's corresponding RGB tuple. Supports both <code>3</code> and <code>6</code> character hex codes and is case-insensitive.</p> <pre><code>hex_to_rgb(hexcode: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>hexcode</code>: The hexadecimal color code to convert. Can be in the form <code>#FFF</code>, <code>FFF</code>, <code>#ffffff</code>, or <code>ffffff</code></li> </ul> <p>Returns:</p> <ul> <li><code>Tuple[int, int, int]</code>: A tuple representing the RGB color</li> </ul> <p>Raises:</p> <ul> <li><code>HexError</code>: If the provided hexcode is not a valid hex color</li> </ul>"},{"location":"api-reference/ansy/#rgb_to_hex","title":"rgb_to_hex","text":"<p>Converts an RGB color tuple into a hexadecimal color string. Optionally includes the <code>#</code> symbol in the output.</p> <pre><code>rgb_to_hex(rgb: RGBTuple, with_symbol: bool = True)\n</code></pre> <p>Parameters:</p> <ul> <li><code>rgb</code>: The RGB color tuple to convert</li> <li><code>with_symbol</code>: Whether to prepend the hex string with a <code>#</code></li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The hexadecimal color code string</li> </ul> <p>Raises:</p> <ul> <li><code>RGBError</code>: If <code>rgb</code> is not a valid RGB tuple</li> </ul>"},{"location":"api-reference/ansy/#is_valid_color","title":"is_valid_color","text":"<p>Validates whether the given color is valid according to the specified color mode. Returns <code>True</code> if the color is valid, otherwise <code>False</code>.</p> <pre><code>is_valid_color(color: Color, color_mode: ColorMode)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color</code>: The color to validate</li> <li><code>color_mode</code>: The color mode of the <code>color</code></li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: <code>True</code> if the color is valid for the given mode, otherwise <code>False</code></li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#is_valid_attr","title":"is_valid_attr","text":"<p>Checks if the given attribute string is a valid ANSI text style attribute.</p> <pre><code>is_valid_attr(attr: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>attr</code>: The name of the attribute to validate</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: <code>True</code> if the attribute is valid, otherwise <code>False</code></li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#is_valid_hex","title":"is_valid_hex","text":"<p>Checks whether the given string is a valid hexadecimal color code. Accepts hexcodes with <code>3</code> or <code>6</code> digits, and optional <code>#</code>.</p> <pre><code>is_valid_hex(hexcode: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>hexcode</code>: The hex color code to validate</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: <code>True</code> if the hexcode is valid, otherwise <code>False</code></li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#is_valid_rgb","title":"is_valid_rgb","text":"<p>Checks if the given value is a valid RGB tuple, ensuring it contains exactly three integers between <code>0</code> and <code>255</code>.</p> <pre><code>is_valid_rgb(rgb: RGBTuple)\n</code></pre> <p>Parameters:</p> <ul> <li><code>rgb</code>: A tuple of three integers representing RGB values</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: <code>True</code> if the tuple is a valid RGB color, otherwise <code>False</code></li> </ul> <p>Raises:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"api-reference/ansy/#exceptions","title":"Exceptions","text":"<p>These below are the custom exceptions raised by <code>ansy</code>.</p>"},{"location":"api-reference/ansy/#styleerror","title":"StyleError","text":"<p>Base Class:</p> <ul> <li><code>Exception</code></li> </ul> <p>Raised When:</p> <ul> <li>A style used in an ansy string is not defined in the provided style dictionary.</li> <li>The structure or content of the style dictionary is incorrect.</li> </ul> <p>Details:</p> <p>Ensure that the style name used in the <code>@style_name[...]</code> syntax is present in the style dictionary, and that the style dictionary contains valid keys like <code>color_mode</code>, <code>fgcolor</code>, <code>bgcolor</code>, and <code>attrs</code>.</p>"},{"location":"api-reference/ansy/#colormodeerror","title":"ColorModeError","text":"<p>Base Class:</p> <ul> <li><code>Exception</code></li> </ul> <p>Raised When:</p> <ul> <li>The <code>color_mode</code> value is not one of the supported modes: <code>4</code>, <code>8</code>, or <code>24</code>.</li> </ul> <p>Details:</p> <p>Ansy supports three color modes:</p> <ul> <li><code>4</code> for 4-bit color (16 standard colors)</li> <li><code>8</code> for 8-bit color (256 extended colors)</li> <li><code>24</code> for 24-bit color (16.7 million RGB colors)</li> </ul> <p>Providing any value outside these options will raise this exception.</p>"},{"location":"api-reference/ansy/#invalidcolorerror","title":"InvalidColorError","text":"<p>Base Class:</p> <ul> <li><code>Exception</code></li> </ul> <p>Raised When:</p> <ul> <li>A color value does not match the expected format.</li> <li>The color name or code is not valid in 4-bit, 8-bit, or 24-bit color systems.</li> </ul> <p>Details:</p> <p>This exception helps ensure that only valid colors are used across all coloring functions in Ansy.</p>"},{"location":"api-reference/ansy/#rgberror","title":"RGBError","text":"<p>Base Class:</p> <ul> <li><code>InvalidColorError</code></li> </ul> <p>Raised When:</p> <ul> <li>The RGB value is not a tuple.</li> <li>One or more components are not integers between <code>0</code> and <code>255</code>.</li> <li>The tuple does not contain exactly three elements.</li> </ul>"},{"location":"api-reference/ansy/#hexerror","title":"HexError","text":"<p>Base Class:</p> <ul> <li><code>InvalidColorError</code></li> </ul> <p>Raised When:</p> <ul> <li>The hex code contains characters outside <code>0-9</code> and <code>a-f/A-F</code>.</li> <li>The length is not 3 or 6 (excluding the optional <code>#</code> symbol).</li> <li>The format does not match valid hex color syntax.</li> </ul>"},{"location":"api-reference/colors/","title":"Colors API","text":"<p>This section contains the API reference for Colors sub-module.</p>"},{"location":"api-reference/colors/#get_material_color","title":"get_material_color","text":"<p>Returns a dictionary of all shades of a material color</p> <pre><code>get_material_color(color: str)\n</code></pre> <p>Parameters:</p> <ul> <li><code>color</code>: A color name from Material Colors</li> </ul> <p>Returns:</p> <ul> <li><code>dict | None</code>: A dictionary of corresponding color shades if found, otherwise <code>None</code></li> </ul>"},{"location":"api-reference/colors/#get_web_colors","title":"get_web_colors","text":"<p>Yields color dicts from web color list.</p> <pre><code>get_web_colors()\n</code></pre> <p>Returns:</p> <ul> <li><code>Generator[Dict]</code>: A generator that yields HTML Colors in a <code>dictionary</code> on each iteration.</li> </ul>"},{"location":"api-reference/colors/#get_palettes","title":"get_palettes","text":"<p>Yields predefined color palettes.</p> <pre><code>get_palettes()\n</code></pre> <p>Returns:</p> <ul> <li><code>Generator[List[str]]</code>: A generator that yields a predefined color palette as a <code>list</code> on each iteration.</li> </ul>"},{"location":"api-reference/colors/#get_random_palette","title":"get_random_palette","text":"<p>Get a random palette from all predefined colors palettes.</p> <pre><code>get_random_palette()\n</code></pre> <p>Returns:</p> <ul> <li><code>List[str]</code>: A predefined color palette. (list of hex colors)</li> </ul>"}]}